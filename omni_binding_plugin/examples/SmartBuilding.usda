#usda 1.0
(
    defaultPrim = "SmartBuilding"
)

def Scope "SmartBuilding" (
    prepend apiSchemas = ["BindingAPI"]
    documentation = "Smart building management system with multiple data sources"
)
{
    # Global context variables
    dictionary binding:context = {
        "buildingId": "building_001",
        "region": "us-west-2",
        "mqttBroker": "mqtts://iot.eclipse.org:8883",
        "apiBase": "https://api.smartbuilding.com/v1",
        "sqlEndpoint": "sql://database.smartbuilding.com/sensors"
    }

    # Global auth defaults
    dictionary binding:authDefaults:mqtt = {
        "authMethod": "mtls",
        "authProfile": "building-mqtt-certs"
    }
    
    dictionary binding:authDefaults:rest = {
        "authMethod": "oauth2",
        "authProfile": "building-api-token"
    }
    
    dictionary binding:authDefaults:sql = {
        "authMethod": "oauth2",
        "authProfile": "database-token"
    }

    # HVAC System
    def Scope "HVAC" (
        prepend apiSchemas = ["BindingAPI"]
    )
    {
        dictionary binding:context = {
            "systemType": "hvac"
        }

        def Cube "AirConditioner_Zone1"
        {
            string deviceId = "ac_zone1_001"
            
            # Real-time temperature from MQTT
            double currentTemperature = 0.0 (
                custom token binding:protocol = "mqtt"
                custom token binding:operation = "stream"
                custom string binding:uri = "${mqttBroker}"
                custom string binding:topic = "/${buildingId}/hvac/${deviceId}/temperature"
                custom string binding:refreshPolicy = "onConnect"
            )
            
            # Humidity streaming
            double currentHumidity = 0.0 (
                custom token binding:protocol = "mqtt"
                custom token binding:operation = "stream"
                custom string binding:uri = "${mqttBroker}"
                custom string binding:topic = "/${buildingId}/hvac/${deviceId}/humidity"
            )
            
            # Target temperature from REST API
            double targetTemperature = 22.0 (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${apiBase}/devices/${deviceId}/settings"
                custom token binding:method = "GET"
                custom string binding:jsonPath = "$.target_temperature"
                custom string binding:refreshPolicy = "interval:30s"
            )
            
            # Device status
            string operationStatus = "unknown" (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${apiBase}/devices/${deviceId}/status"
                custom token binding:method = "GET"
                custom string binding:jsonPath = "$.status"
                custom string binding:refreshPolicy = "interval:10s"
            )
            
            # Energy consumption from SQL
            double energyConsumption = 0.0 (
                custom token binding:protocol = "sql"
                custom token binding:operation = "read"
                custom string binding:uri = "${sqlEndpoint}"
                custom string binding:query = "SELECT AVG(power_kw) FROM energy_data WHERE device_id = '${deviceId}' AND timestamp > NOW() - INTERVAL 1 HOUR"
                custom string binding:refreshPolicy = "interval:300s"
            )
        }

        def Cube "Thermostat_Zone1"
        {
            string deviceId = "thermo_zone1_001"
            
            # Current settings from file (local config)
            double setPoint = 22.0 (
                custom token binding:protocol = "file"
                custom token binding:operation = "stream"
                custom string binding:uri = "file:///etc/smartbuilding/${deviceId}/config.json"
                custom string binding:jsonPath = "$.setpoint"
                custom string binding:refreshPolicy = "interval:5s"
            )
            
            # Occupancy sensor via WebSocket
            bool roomOccupied = false (
                custom token binding:protocol = "websocket"
                custom token binding:operation = "stream"
                custom string binding:uri = "wss://sensors.smartbuilding.com/occupancy"
                custom string binding:topic = "${buildingId}/zone1/occupancy"
            )
        }
    }

    # Lighting System
    def Scope "Lighting" (
        prepend apiSchemas = ["BindingAPI"]
    )
    {
        dictionary binding:context = {
            "systemType": "lighting"
        }

        def Cube "LEDController_Zone1"
        {
            string deviceId = "led_zone1_001"
            
            # Light level from sensor
            double lightLevel = 0.0 (
                custom token binding:protocol = "mqtt"
                custom token binding:operation = "stream"
                custom string binding:uri = "${mqttBroker}"
                custom string binding:topic = "/${buildingId}/lighting/${deviceId}/sensor"
            )
            
            # Brightness setting
            double brightness = 80.0 (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${apiBase}/lighting/${deviceId}/brightness"
                custom token binding:method = "GET"
                custom string binding:refreshPolicy = "interval:60s"
            )
            
            # Schedule from database
            string currentSchedule = "" (
                custom token binding:protocol = "sql"
                custom token binding:operation = "read"
                custom string binding:uri = "${sqlEndpoint}"
                custom string binding:query = "SELECT schedule_name FROM lighting_schedules WHERE device_id = '${deviceId}' AND NOW() BETWEEN start_time AND end_time LIMIT 1"
                custom string binding:refreshPolicy = "interval:900s"
            )
        }
    }

    # Security System
    def Scope "Security" (
        prepend apiSchemas = ["BindingAPI"]
    )
    {
        dictionary binding:authDefaults:websocket = {
            "authMethod": "apikey",
            "authProfile": "security-api-key"
        }

        def Cube "DoorSensor_MainEntrance"
        {
            string deviceId = "door_main_001"
            
            # Door status via WebSocket (real-time security events)
            bool doorOpen = false (
                custom token binding:protocol = "websocket"
                custom token binding:operation = "stream"
                custom string binding:uri = "wss://security.smartbuilding.com/events"
                custom string binding:topic = "${buildingId}/doors/${deviceId}/status"
            )
            
            # Access log from database
            int dailyAccessCount = 0 (
                custom token binding:protocol = "sql"
                custom token binding:operation = "read"
                custom string binding:uri = "${sqlEndpoint}"
                custom string binding:query = "SELECT COUNT(*) FROM access_log WHERE device_id = '${deviceId}' AND DATE(timestamp) = CURDATE()"
                custom string binding:refreshPolicy = "interval:3600s"
            )
        }

        def Cube "Camera_Lobby"
        {
            string deviceId = "cam_lobby_001"
            
            # Camera status
            string cameraStatus = "offline" (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${apiBase}/cameras/${deviceId}/status"
                custom token binding:method = "GET"
                custom string binding:refreshPolicy = "interval:30s"
            )
            
            # Motion detection events
            bool motionDetected = false (
                custom token binding:protocol = "mqtt"
                custom token binding:operation = "stream"
                custom string binding:uri = "${mqttBroker}"
                custom string binding:topic = "/${buildingId}/security/cameras/${deviceId}/motion"
            )
        }
    }

    # Weather Integration (external API)
    def Scope "Weather" (
        prepend apiSchemas = ["BindingAPI"]
    )
    {
        dictionary binding:context = {
            "weatherApiBase": "https://api.openweathermap.org/data/2.5"
        }

        dictionary binding:authDefaults:rest = {
            "authMethod": "apikey",
            "authProfile": "weather-api-key"
        }

        def Sphere "WeatherStation"
        {
            # Current outdoor temperature
            double outdoorTemperature = 0.0 (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${weatherApiBase}/weather?q=${region}"
                custom token binding:method = "GET"
                custom string binding:jsonPath = "$.main.temp"
                custom string binding:refreshPolicy = "interval:600s"
            )
            
            # Humidity
            double outdoorHumidity = 0.0 (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${weatherApiBase}/weather?q=${region}"
                custom token binding:method = "GET"
                custom string binding:jsonPath = "$.main.humidity"
                custom string binding:refreshPolicy = "interval:600s"
            )
            
            # Weather description
            string weatherCondition = "clear" (
                custom token binding:protocol = "rest"
                custom token binding:operation = "read"
                custom string binding:uri = "${weatherApiBase}/weather?q=${region}"
                custom token binding:method = "GET"
                custom string binding:jsonPath = "$.weather[0].description"
                custom string binding:refreshPolicy = "interval:1800s"
            )
        }
    }

    # File-based Configuration
    def Scope "Configuration" (
        prepend apiSchemas = ["BindingAPI"]
    )
    {
        def Cube "SystemConfig"
        {
            # Global system settings from local file
            double emergencyTemperatureThreshold = 30.0 (
                custom token binding:protocol = "file"
                custom token binding:operation = "stream"
                custom string binding:uri = "file:///etc/smartbuilding/config.json"
                custom string binding:jsonPath = "$.emergency_temp_threshold"
                custom string binding:refreshPolicy = "interval:30s"
            )
            
            # Maintenance schedule
            string maintenanceMode = "false" (
                custom token binding:protocol = "file"
                custom token binding:operation = "stream"
                custom string binding:uri = "file:///var/smartbuilding/maintenance.txt"
                custom string binding:refreshPolicy = "interval:60s"
            )
        }
    }
}
